{"version":3,"sources":["ExternalNode.js","cities.js","SortableTree.js","App.js","index.js"],"names":["externalNodeType","availableNodes","forEach","race","dropped","editable","leaf","expanded","externalNodeSpec","beginDrag","props","monitor","component","node","canDrag","title","endDrag","didDrop","externalNodeBaseComponent","this","connectDragSource","isDragging","isDisabled","Button","disabled","primary","dropEffect","Component","ExternalNode","DragSource","connect","dragSource","ExternalNodeContainer","style","lineHeight","Object","keys","map","SortTree","state","treeData","childable","deletable","children","removeNode","path","setState","removeNodeAtPath","getNodeKey","treeIndex","insertNewNode","addNodeUnderParent","parentKey","length","expandParent","newNode","canDrop","nextParent","prevPath","nextPath","Tab","panes","menuItem","render","Pane","height","dndType","onChange","generateNodeProps","undefined","fontSize","width","value","event","target","changeNodeAtPath","buttons","size","color","circular","icon","onClick","e","preventDefault","stopPropagation","src","App","DndProvider","backend","HTML5Backend","Container","Header","as","paddingTop","Divider","ReactDOM","StrictMode","document","getElementById"],"mappings":"yQAUaA,EAAmB,eACnBC,EAAiB,GCXA,CAC5B,iBACA,QACA,iBACA,aACA,YACA,QACA,WACA,UACA,YACA,YACA,oBACA,SACA,WACA,WACA,gBACA,YACA,eACA,wBACA,eACA,QACA,OACA,8BACA,kBACA,cACA,WACA,cACA,iBACA,SACA,WDhBaC,SAAQ,SAACC,GACtBF,EAAeE,GAAQ,CACrBC,SAAS,EACTC,UAAU,EACVC,MAAM,EACNC,UAAU,MAId,IAAMC,EAAmB,CACvBC,UAAW,SAACC,EAAOC,EAASC,GAAjB,MAAgC,CAAEC,KAAK,eAAMH,EAAMG,QAC9DC,QAAS,SAACJ,EAAOC,GAAa,IACpBE,EAASH,EAATG,KAER,OAAQZ,EAAeY,EAAKE,OAAOX,SAErCY,QAAS,SAACN,EAAOC,EAASC,GACxB,GAAKD,EAAQM,UAAb,CADsC,IAG9BJ,EAASH,EAATG,KAERZ,EAAeY,EAAKE,OAAOX,SAAU,KASnCc,E,4JACJ,WAAU,IAAD,EACyCC,KAAKT,MAA7CU,EADD,EACCA,kBAAmBC,EADpB,EACoBA,WAAYR,EADhC,EACgCA,KAEjCS,EACHrB,EAAeY,EAAKE,QAAUd,EAAeY,EAAKE,OAAOX,SAC1DiB,EAEF,OAAOD,EACL,+BACE,cAACG,EAAA,EAAD,CAAQC,SAAUF,EAAYG,SAAUH,EAAxC,SACGT,EAAKE,UAIV,CAAEW,WAAY,a,GAfoBC,aAyBlCC,EAAeC,YACnB7B,EACAQ,GAjC0B,SAACsB,EAASnB,GAAV,MAAuB,CACjDS,kBAAmBU,EAAQC,aAC3BV,WAAYV,EAAQU,aACpBJ,QAASN,EAAQM,aA4BEY,CAInBX,GAEWc,EAAb,4JACE,WACE,OACE,qBAAKC,MAAO,CAAEC,WAAY,GAA1B,SACGC,OAAOC,KAAKnC,GAAgBoC,KAAI,SAACxB,GAAD,OAC/B,cAACe,EAAD,CAAcf,KAAI,aAAIE,MAAOF,GAASZ,EAAeY,eAL/D,GAA2Cc,aEhEtBW,E,4MACnBC,MAAQ,CACNC,SAAU,CACR,CACEzB,MAAO,aACPV,UAAU,EACVoC,WAAW,EACXC,WAAW,EACXnC,UAAU,EACVoC,SAAU,CACR,CACE5B,MAAO,GACPV,UAAU,EACVoC,WAAW,EACXC,WAAW,EACXnC,UAAU,EACVoC,SAAU,Q,EAOpBC,WAAa,SAACC,GACZ,EAAKC,UAAS,SAACP,GAAD,MAAY,CACxBC,SAAUO,YAAiB,CACzBP,SAAUD,EAAMC,SAChBK,OACAG,WAAY,qBAAGC,kB,EAKrBC,cAAgB,SAACL,GACf,EAAKC,UAAS,SAACP,GAAD,MAAY,CACxBC,SAAUW,YAAmB,CAC3BX,SAAUD,EAAMC,SAChBY,UAAWP,EAAKA,EAAKQ,OAAS,GAC9BC,cAAc,EACdC,QAAS,CACPxC,MAAO,GACPV,UAAU,EACVoC,WAAW,EACXC,WAAW,EACXC,SAAU,IAEZK,WAAY,qBAAGC,aACdT,c,EAIPgB,QAAU,YAA8C,EAA3C3C,KAA4C,IAAtC4C,EAAqC,EAArCA,WAAqC,EAAzBC,SAAyB,EAAfC,SAEvC,OAAmB,OAAfF,KAGAA,IAAkC,IAApBA,EAAWnD,O,4CAK/B,WAAU,IAAD,OACCkC,EAAarB,KAAKoB,MAAlBC,SACFQ,EAAa,SAAC,GAAD,SAAGC,WAEtB,OACE,cAACW,EAAA,EAAD,CACEC,MAAO,CACL,CACEC,SAAU,YACVC,OAAQ,kBACN,cAACH,EAAA,EAAII,KAAL,UACE,qBAAK/B,MAAO,CAAEgC,OAAQ,QAAtB,SACE,cAAC,IAAD,CACEzB,SAAUA,EACV0B,QAASlE,EACTwD,QAAS,EAAKA,QACdW,SAAU,SAAC3B,GAAD,OAAc,EAAKM,SAAS,CAAEN,cACxC4B,kBAAmB,gBAAGvD,EAAH,EAAGA,KAAMgC,EAAT,EAASA,KAAT,MAAqB,CACtC9B,MACE,gCACqB,IAAlBF,EAAKR,eACYgE,IAAlBxD,EAAKR,SACH,uBACE4B,MAAO,CAAEqC,SAAU,OAAQC,MAAO,KAClCC,MAAO3D,EAAKE,MACZoD,SAAU,SAACM,GACT,IAAM1D,EAAQ0D,EAAMC,OAAOF,MAC3B,EAAK1B,UAAS,SAACP,GAAD,MAAY,CACxBC,SAAUmC,YAAiB,CACzBnC,SAAUD,EAAMC,SAChBK,OACAG,aACAO,QAAQ,2BAAM1C,GAAP,IAAaE,mBAM5BF,EAAKE,QAIX6D,QAAS,CACP/D,EAAK4B,UACH,+BACE,cAAClB,EAAA,EAAD,CACEsD,KAAK,OACLC,MAAM,OACNC,UAAQ,EACRC,KAAK,MACLC,QAAS,SAACC,GACRA,EAAEC,iBACFD,EAAEE,kBACF,EAAKlC,cAAcL,aAIvBwB,EACJxD,EAAK6B,WACL7B,EAAK8B,WACJ9B,EAAK8B,SAASU,OACb,cAAC9B,EAAA,EAAD,CACEsD,KAAK,OACLC,MAAM,OACNC,UAAQ,EACRC,KAAK,QACLC,QAAS,SAACC,GACRA,EAAEC,iBACFD,EAAEE,kBACF,EAAKxC,WAAWC,WAGlBwB,aAQlB,CACEP,SAAU,OACVC,OAAQ,kBACN,cAACH,EAAA,EAAII,KAAL,UACE,cAAC,IAAD,CAAWqB,IAAK,EAAK9C,MAAMC,sB,GAjJLb,a,4CCYvB2D,MAhBf,WACE,OACE,cAACC,EAAA,EAAD,CAAaC,QAASC,IAAtB,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQC,GAAG,KAAK3D,MAAO,CAAE4D,WAAY,IAArC,gCAGA,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,IACA,cAACA,EAAA,EAAD,IACA,cAAC,EAAD,U,cCVRC,IAAShC,OACP,cAAC,IAAMiC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9f5d84ac.chunk.js","sourcesContent":["/**\n * Reference:\n * https://github.com/frontend-collective/react-sortable-tree/blob/master/stories/external-node.js\n */\nimport PropTypes from \"prop-types\";\nimport { DragSource } from \"react-dnd\";\nimport React, { Component } from \"react\";\nimport { Button } from \"semantic-ui-react\";\nimport { selectedCities } from \"./cities\";\n\nexport const externalNodeType = \"ExternalNode\";\nexport const availableNodes = {};\n\nselectedCities.forEach((race) => {\n  availableNodes[race] = {\n    dropped: false,\n    editable: false,\n    leaf: true,\n    expanded: true,\n  };\n});\n\nconst externalNodeSpec = {\n  beginDrag: (props, monitor, component) => ({ node: { ...props.node } }),\n  canDrag: (props, monitor) => {\n    const { node } = props;\n\n    return !availableNodes[node.title].dropped;\n  },\n  endDrag: (props, monitor, component) => {\n    if (!monitor.didDrop()) return;\n\n    const { node } = props;\n\n    availableNodes[node.title].dropped = true;\n  },\n};\nconst externalNodeCollect = (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  isDragging: monitor.isDragging(),\n  didDrop: monitor.didDrop(),\n});\n\nclass externalNodeBaseComponent extends Component {\n  render() {\n    const { connectDragSource, isDragging, node } = this.props;\n\n    const isDisabled =\n      (availableNodes[node.title] && availableNodes[node.title].dropped) ||\n      isDragging;\n\n    return connectDragSource(\n      <span>\n        <Button disabled={isDisabled} primary={!isDisabled}>\n          {node.title}\n        </Button>\n      </span>,\n\n      { dropEffect: \"copy\" }\n    );\n  }\n}\n\nexternalNodeBaseComponent.propTypes = {\n  node: PropTypes.shape({ title: PropTypes.string }).isRequired,\n  connectDragSource: PropTypes.func.isRequired,\n};\n\nconst ExternalNode = DragSource(\n  externalNodeType,\n  externalNodeSpec,\n  externalNodeCollect\n)(externalNodeBaseComponent);\n\nexport class ExternalNodeContainer extends Component {\n  render() {\n    return (\n      <div style={{ lineHeight: 3 }}>\n        {Object.keys(availableNodes).map((node) => (\n          <ExternalNode node={{ title: node, ...availableNodes[node] }} />\n        ))}\n      </div>\n    );\n  }\n}\n","export const selectedCities = [\n  \"100 mile house\",\n  \"bagot\",\n  \"bickerton west\",\n  \"brookside.\",\n  \"carseland\",\n  \"codys\",\n  \"delaware\",\n  \"edwards\",\n  \"fort kent\",\n  \"gouldtown\",\n  \"havre-aux-maisons\",\n  \"irvine\",\n  \"kugaaruk\",\n  \"lefaivre\",\n  \"mackay siding\",\n  \"membertou\",\n  \"mulhurst bay\",\n  \"notre-dame-de-lorette\",\n  \"peterborough\",\n  \"pratt\",\n  \"robb\",\n  \"saint-edouard-de-maskinonge\",\n  \"saint-stanislas\",\n  \"seeleys bay\",\n  \"spy hill\",\n  \"sussex east\",\n  \"upper brighton\",\n  \"watino\",\n  \"wyevale\",\n];\n","import React, { Component } from \"react\";\nimport ReactJson from \"react-json-view\";\nimport SortableTree, {\n  changeNodeAtPath,\n  addNodeUnderParent,\n  removeNodeAtPath,\n} from \"react-sortable-tree\";\nimport { Button, Tab } from \"semantic-ui-react\";\nimport { externalNodeType } from \"./ExternalNode\";\n\nexport default class SortTree extends Component {\n  state = {\n    treeData: [\n      {\n        title: \"Root Group\",\n        editable: false,\n        childable: true,\n        deletable: false,\n        expanded: true,\n        children: [\n          {\n            title: \"\",\n            editable: true,\n            childable: true,\n            deletable: true,\n            expanded: true,\n            children: [],\n          },\n        ],\n      },\n    ],\n  };\n\n  removeNode = (path) => {\n    this.setState((state) => ({\n      treeData: removeNodeAtPath({\n        treeData: state.treeData,\n        path,\n        getNodeKey: ({ treeIndex }) => treeIndex,\n      }),\n    }));\n  };\n\n  insertNewNode = (path) => {\n    this.setState((state) => ({\n      treeData: addNodeUnderParent({\n        treeData: state.treeData,\n        parentKey: path[path.length - 1],\n        expandParent: true,\n        newNode: {\n          title: \"\",\n          editable: true,\n          childable: true,\n          deletable: true,\n          children: [],\n        },\n        getNodeKey: ({ treeIndex }) => treeIndex,\n      }).treeData,\n    }));\n  };\n\n  canDrop = ({ node, nextParent, prevPath, nextPath }) => {\n    // Prevent another root node from forming\n    if (nextParent === null) return false;\n\n    // Prevent leaf nodes from having leaf parents\n    if (nextParent && nextParent.leaf === true) return false;\n\n    return true;\n  };\n\n  render() {\n    const { treeData } = this.state;\n    const getNodeKey = ({ treeIndex }) => treeIndex;\n\n    return (\n      <Tab\n        panes={[\n          {\n            menuItem: \"Tree View\",\n            render: () => (\n              <Tab.Pane>\n                <div style={{ height: \"60vh\" }}>\n                  <SortableTree\n                    treeData={treeData}\n                    dndType={externalNodeType}\n                    canDrop={this.canDrop}\n                    onChange={(treeData) => this.setState({ treeData })}\n                    generateNodeProps={({ node, path }) => ({\n                      title: (\n                        <span>\n                          {node.editable === true ||\n                          node.editable === undefined ? (\n                            <input\n                              style={{ fontSize: \"1rem\", width: 200 }}\n                              value={node.title}\n                              onChange={(event) => {\n                                const title = event.target.value;\n                                this.setState((state) => ({\n                                  treeData: changeNodeAtPath({\n                                    treeData: state.treeData,\n                                    path,\n                                    getNodeKey,\n                                    newNode: { ...node, title },\n                                  }),\n                                }));\n                              }}\n                            />\n                          ) : (\n                            node.title\n                          )}\n                        </span>\n                      ),\n                      buttons: [\n                        node.childable ? (\n                          <span>\n                            <Button\n                              size=\"mini\"\n                              color=\"blue\"\n                              circular\n                              icon=\"add\"\n                              onClick={(e) => {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                this.insertNewNode(path);\n                              }}\n                            />\n                          </span>\n                        ) : undefined,\n                        node.deletable &&\n                        node.children &&\n                        !node.children.length ? (\n                          <Button\n                            size=\"mini\"\n                            color=\"blue\"\n                            circular\n                            icon=\"trash\"\n                            onClick={(e) => {\n                              e.preventDefault();\n                              e.stopPropagation();\n                              this.removeNode(path);\n                            }}\n                          />\n                        ) : undefined,\n                      ],\n                    })}\n                  />\n                </div>\n              </Tab.Pane>\n            ),\n          },\n          {\n            menuItem: \"JSON\",\n            render: () => (\n              <Tab.Pane>\n                <ReactJson src={this.state.treeData} />\n              </Tab.Pane>\n            ),\n          },\n        ]}\n      />\n    );\n  }\n}\n","import SortTree from \"./SortableTree\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { DndProvider } from \"react-dnd\";\nimport { ExternalNodeContainer } from \"./ExternalNode\";\nimport { Divider, Container, Header } from \"semantic-ui-react\";\n\nfunction App() {\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Container>\n        <Header as=\"h1\" style={{ paddingTop: 10 }}>\n          City Grouping Demo\n        </Header>\n        <Divider />\n        <ExternalNodeContainer />\n        <Divider />\n        <SortTree />\n      </Container>\n    </DndProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-sortable-tree/style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}